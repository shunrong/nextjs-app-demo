generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户主表
model User {
  id        Int      @id @default(autoincrement())
  phone     String   @unique // 手机号唯一，确保一个手机号一个账号
  name      String
  nick      String?
  password  String
  gender    Int      @default(1) // 1=MALE, 2=FEMALE
  avatar    String?
  role      Int      @default(1) // 1=STUDENT, 2=TEACHER, 3=BOSS
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 业务关联
  student        Student?
  teacher        Teacher?
  boss           Boss?
  socials        Social[] // 社交账号绑定
  studentOrders  Order[] // 作为学生的订单
  teacherCourses Course[] // 作为教师的课程
  studentleaves  Leave[] // 作为学生的请假记录

  @@index([role])
  @@index([phone])
  @@index([name])
}

// 社交账号绑定表
model Social {
  id       Int    @id @default(autoincrement())
  userId   Int
  openId   String
  platform String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([platform, openId])
  @@index([userId])
}

// 学生信息表
model Student {
  id           Int       @id @default(autoincrement())
  userId       Int       @unique
  birth        DateTime?
  photo        String?
  parentPhone1 String
  parentName1  String
  parentRole1  Int       @default(1)
  parentPhone2 String?
  parentName2  String?
  parentRole2  Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 教师信息表
model Teacher {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  job       Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 老板信息表
model Boss {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 课程表
model Course {
  id        Int      @id @default(autoincrement())
  title     String
  subtitle  String?
  category  Int      @default(1) //
  teacherId Int
  banner    String?
  year      Int      @default(2025)
  term      Int      @default(1)
  status    Int      @default(1)
  address   String
  price     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher User     @relation(fields: [teacherId], references: [id])
  lessons Lesson[]
  orders  Order[]

  @@index([teacherId])
  @@index([category])
  @@index([year, term])
  @@index([status])
}

// 课时表
model Lesson {
  id        Int      @id @default(autoincrement())
  courseId  Int
  title     String
  subtitle  String?
  startTime DateTime @default(now())
  endTime   DateTime @default(now())
  status    Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  leaves Leave[]

  @@index([courseId])
  @@index([startTime])
  @@index([status])
}

// 订单表
model Order {
  id        Int       @id @default(autoincrement())
  studentId Int
  courseId  Int
  status    Int       @default(1)
  payTime   DateTime?
  amount    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  student User   @relation(fields: [studentId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])

  @@index([studentId])
  @@index([courseId])
}

// 请假记录表
model Leave {
  id        Int      @id @default(autoincrement())
  studentId Int
  lessonId  Int
  reason    String?
  createdAt DateTime @default(now())

  student User   @relation(fields: [studentId], references: [id])
  lesson  Lesson @relation(fields: [lessonId], references: [id])

  @@unique([studentId, lessonId])
  @@index([studentId])
  @@index([lessonId])
}
