generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js 相关表
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 用户表（扩展 NextAuth 的 User 表）
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String? // 用于邮箱密码登录
  role          Role       @default(STUDENT)
  phone         String?
  gender        Gender?
  credits       Int        @default(0)
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // NextAuth 关联
  accounts Account[]
  sessions Session[]

  // 业务关联
  enrollments    Enrollment[]
  orders         Order[]
  teacherProfile TeacherProfile?
}

// 教师资料表
model TeacherProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  title        String // 职称
  bio          String?  @db.Text
  skills       String[] // 技能标签
  rating       Float    @default(0)
  totalCourses Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses Course[]
}

// 课程表
model Course {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  category    String
  level       CourseLevel  @default(BEGINNER)
  price       Int // 价格（分）
  lessons     Int          @default(0)
  banner      String?
  status      CourseStatus @default(DRAFT)
  teacherId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  teacher     TeacherProfile @relation(fields: [teacherId], references: [id])
  enrollments Enrollment[]
  orders      Order[]
}

// 选课记录
model Enrollment {
  id          String           @id @default(cuid())
  userId      String
  courseId    String
  status      EnrollmentStatus @default(ACTIVE)
  progress    Int              @default(0) // 进度百分比
  enrolledAt  DateTime         @default(now())
  completedAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

// 订单表
model Order {
  id        String      @id @default(cuid())
  orderNo   String      @unique
  userId    String
  courseId  String
  amount    Int // 金额（分）
  payMethod PayMethod?
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  paidAt    DateTime?

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

// 枚举类型
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  GRADUATED
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
  ACTIVE
  SUSPENDED
  COMPLETED
}

enum OrderStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

enum PayMethod {
  ALIPAY
  WECHAT
  CARD
}
